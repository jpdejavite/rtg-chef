// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"fmt"
	"io"
	"strconv"

	"github.com/jpdejavite/rtg-chef/api/graphql/models"
)

type AppQueries struct {
	ID      string                   `json:"id"`
	Recipes *models.RecipeAppQueries `json:"recipes"`
}

func (AppQueries) IsEntity() {}

type Recipe struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

type RecipeList struct {
	Total   int       `json:"total"`
	Recipes []*Recipe `json:"recipes"`
}

type RecipeListInput struct {
	Filter    *string              `json:"filter"`
	Limit     int                  `json:"limit"`
	Offset    int                  `json:"offset"`
	OrderBy   RecipeOrderBy        `json:"orderBy"`
	Direction RecipeOrderDirection `json:"direction"`
}

type RecipeOrderBy string

const (
	RecipeOrderByName RecipeOrderBy = "name"
)

var AllRecipeOrderBy = []RecipeOrderBy{
	RecipeOrderByName,
}

func (e RecipeOrderBy) IsValid() bool {
	switch e {
	case RecipeOrderByName:
		return true
	}
	return false
}

func (e RecipeOrderBy) String() string {
	return string(e)
}

func (e *RecipeOrderBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RecipeOrderBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RecipeOrderBy", str)
	}
	return nil
}

func (e RecipeOrderBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type RecipeOrderDirection string

const (
	RecipeOrderDirectionAsc  RecipeOrderDirection = "asc"
	RecipeOrderDirectionDesc RecipeOrderDirection = "desc"
)

var AllRecipeOrderDirection = []RecipeOrderDirection{
	RecipeOrderDirectionAsc,
	RecipeOrderDirectionDesc,
}

func (e RecipeOrderDirection) IsValid() bool {
	switch e {
	case RecipeOrderDirectionAsc, RecipeOrderDirectionDesc:
		return true
	}
	return false
}

func (e RecipeOrderDirection) String() string {
	return string(e)
}

func (e *RecipeOrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RecipeOrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RecipeOrderDirection", str)
	}
	return nil
}

func (e RecipeOrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
